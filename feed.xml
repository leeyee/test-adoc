<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JBake</title>
    <link>http://localhost:8822/</link>
    <atom:link href="http://localhost:8822//feed.xml" rel="self" type="application/rss+xml" />
    <description>JBake Bootstrap Template</description>
    <language>en-gb</language>
    <pubDate>Wed, 18 Oct 2023 17:39:30 +0800</pubDate>
    <lastBuildDate>Wed, 18 Oct 2023 17:39:30 +0800</lastBuildDate>

    <item>
      <title>Oliver&amp;#8217;s Post</title>
      <link>http://localhost:8822//blog/2013/fifth-post.html</link>
      <pubDate>Mon, 11 Nov 2013 00:00:00 +0800</pubDate>
      <guid isPermaLink="false">blog/2013/fifth-post.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Oliver&amp;#8217;s first post and the fifth post at all.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nam id nisl quam. Donec a lorem sit amet libero pretium vulputate vel ut purus. Suspendisse leo arcu,
mattis et imperdiet luctus, pulvinar vitae mi. Quisque fermentum sollicitudin feugiat. Mauris nec leo
ligula. Vestibulum tristique odio ut risus ultricies a hendrerit quam iaculis. Duis tempor elit sit amet
ligula vehicula et iaculis sem placerat. Fusce dictum, metus at volutpat lacinia, elit massa auctor risus,
id auctor arcu enim eu augue. Donec ultrices turpis in mi imperdiet ac venenatis sapien sodales. In
consequat imperdiet nunc quis bibendum. Nulla semper, erat quis ornare tristique, lectus massa posuere
libero, ut vehicula lectus nunc ut lorem. Aliquam erat volutpat.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Fourth Post</title>
      <link>http://localhost:8822//blog/2013/fourth-post.html</link>
      <pubDate>Thu, 17 Oct 2013 00:00:00 +0800</pubDate>
      <guid isPermaLink="false">blog/2013/fourth-post.html</guid>
      	<description>
	&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/beach.jpg&quot; alt=&quot;Beach&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque vel diam purus. Curabitur ut nisi lacus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://example.org&quot; class=&quot;bare&quot;&gt;http://example.org&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://example.org&quot;&gt;Example.org&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nam id nisl quam. Donec a lorem sit amet libero pretium vulputate vel ut purus. Suspendisse leo arcu,
mattis et imperdiet luctus, pulvinar vitae mi. Quisque fermentum sollicitudin feugiat. Mauris nec leo
ligula. Vestibulum tristique odio ut risus ultricies a hendrerit quam iaculis. Duis tempor elit sit amet
ligula vehicula et iaculis sem placerat. Fusce dictum, metus at volutpat lacinia, elit massa auctor risus,
id auctor arcu enim eu augue. Donec ultrices turpis in mi imperdiet ac venenatis sapien sodales. In
consequat imperdiet nunc quis bibendum. Nulla semper, erat quis ornare tristique, lectus massa posuere
libero, ut vehicula lectus nunc ut lorem. Aliquam erat volutpat.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Sever-sent events note</title>
      <link>http://localhost:8822//blog/2018/10/19/2018-10-19-Sever-sent_events-Note.html</link>
      <pubDate>Thu, 10 Oct 2013 00:00:00 +0800</pubDate>
      <guid isPermaLink="false">blog/2018/10/19/2018-10-19-Sever-sent_events-Note.html</guid>
      	<description>
	&lt;ul&gt;
&lt;li&gt;TOC&lt;br /&gt;
{:toc}&lt;br /&gt;
[toc]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在W3C上查询相关JS和CSS时，偶尔发现的一个前端技术点，随手demo and backup下。&lt;/p&gt;
&lt;p&gt;Sever-send events 简单来说就是服务器推送消息到浏览器。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#main&quot; id=&quot;main&quot;&gt;Main&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;特点:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浏览器和服务器通过HTTP建立长链接(keep-alive)&lt;/li&gt;
&lt;li&gt;链接后，服务器可推送消息给浏览器，而不需要重新再次建立HTTP链接&lt;/li&gt;
&lt;li&gt;单向通讯(服务器 -&amp;gt; 浏览器)&lt;/li&gt;
&lt;li&gt;支持事件分类(&lt;em&gt;event&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;服务器端指定浏览器链接失败或异常时的重试时间(&lt;em&gt;retry&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;限定:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器发送请求头&lt;code&gt;Content-Type&lt;/code&gt;值为&lt;em&gt;text/event-stream&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;消息内容只支持字符，字符需用&lt;em&gt;UTF-8&lt;/em&gt;编码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;可能的使用场景:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;实时图表（股票实时K线图）&lt;/li&gt;
&lt;li&gt;消息推送（消息广播等）&lt;/li&gt;
&lt;li&gt;服务器状态监控（内存监控、负载监控等）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a href=&quot;#客户端浏览器&quot; id=&quot;客户端浏览器&quot;&gt;客户端（浏览器）&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;客户代码使用JS实现。比较简单，主要有一下几个方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;EventSoure&lt;/code&gt;对象&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var evtSource = new EventSource(url);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建后，可通过只读属性 &lt;em&gt;readyState&lt;/em&gt; 获取当前链接状态。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;readyState&lt;/em&gt; 取值:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;EventSource.CONNECTING(0): 连接中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EventSource.OPEN(1): 连接已经建立，可以接收数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EventSource.CLOSED(2): 连接已断，且不会重连。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;onopen&lt;/code&gt;事件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;浏览器和服务器建立链接后触发.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;evtSource.onopen = function (event) {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;onerror&lt;/code&gt;事件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;服务器端链接异常或超时触发&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;evtSource.onerror = function (event) {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;接收消息(事件监听)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;evtSource.addEventListener(event_name, function(event){})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果消息体未指定 &lt;em&gt;event&lt;/em&gt; 属性，那么可以通过&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;evtSource.onmessage = function (event) {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;获取消息。&lt;code&gt;onmessage&lt;/code&gt; 等价于&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;evtSource.addEventListener(&apos;message&apos;, function(event){})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;同样的，&lt;code&gt;onopen&lt;/code&gt;,&lt;code&gt;onerror&lt;/code&gt;都可通过&lt;code&gt;addEventListener&lt;/code&gt;替换。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;特别的对于 &lt;code&gt;addEventListener&lt;/code&gt;的回调函数，返回值将会被默认存放在 &lt;em&gt;event&lt;/em&gt; 这个变量中，因此下列的代码将输出&lt;strong&gt;true&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;evtSource.addEventListener(&apos;message&apos;, function(e){
    console.log(e == event);
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;浏览器主动关闭连接&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;evtSource.close();
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a href=&quot;#客户端代码示例&quot; id=&quot;客户端代码示例&quot;&gt;客户端代码示例&lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;if (typeof(EventSource) !== &amp;quot;undefined&amp;quot;) {

    var evtSource = new EventSource(&amp;quot;/html5/sse/quick_start_easy&amp;quot;);

    evtSource.onopen = function (event) {
        console.log(&amp;quot;readyState: &amp;quot;, this.readyState, event);
    }

    evtSource.onmessage = function (event) {
        console.log(&amp;quot;readyState: &amp;quot;, this.readyState, event.data);
    }

    evtSource.onerror = function (event) {
        console.log(&amp;quot;readyState: &amp;quot;, this.readyState, this, event);
    }

} else {
    console.warn(&apos;Sorry! No server-sent events support.&apos;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a href=&quot;#服务器端&quot; id=&quot;服务器端&quot;&gt;服务器端&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;a href=&quot;#数据格式&quot; id=&quot;数据格式&quot;&gt;数据格式&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;其实就是一段字符串，称为 &lt;strong&gt;Message&lt;/strong&gt; 吧。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每次可以发送多条 &lt;strong&gt;Message&lt;/strong&gt;, 每条 &lt;strong&gt;Message&lt;/strong&gt; 以空白行结尾(\n\n)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每条 &lt;strong&gt;Message&lt;/strong&gt; 的包含以下几个属性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;id属性，标记当前 &lt;strong&gt;Message&lt;/strong&gt; 。客户端可通过 &lt;em&gt;lastEventId&lt;/em&gt; 获取该值。当客户端重连时，会将该值存放在HTTP头信息的 &lt;em&gt;Last-Event-ID&lt;/em&gt; 发送到服务端。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;event属性。事件类型，默认值为&lt;em&gt;message&lt;/em&gt;,可通过 &lt;code&gt;onmessage&lt;/code&gt; 获取。当自定义时，需要通过 &lt;code&gt;addEventListener&lt;/code&gt; 来设置监听回调&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;data属性。要发送的消息正文，可以有多个，每个data一行（使用\n分割）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;retry属性。当连接异常时，指定客户端再次连接服务时的重试时间间隔。单位毫秒。&lt;em&gt;根据测试默认情况下该值被默认为3s&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;每条消息中只有&lt;em&gt;data&lt;/em&gt;属性是必须的.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特别的，可以只发不带属性只有冒号起始的消息，理解为注释（保持连接）。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Message Example&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;id:1&lt;br /&gt;
event:demoEvent1&lt;br /&gt;
data:first line&lt;br /&gt;
date:second line&lt;br /&gt;
retry:1000&lt;/p&gt;
&lt;p&gt;id:2&lt;br /&gt;
event:demoEvent2&lt;br /&gt;
data:this is a demo data&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Java Code&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;StringBuilder message = new StringBuilder();

// first message
message.append(&amp;quot;id:&amp;quot;).append(1).append(&amp;quot;\n&amp;quot;);
message.append(&amp;quot;event:&amp;quot;).append(&amp;quot;demoEvent1&amp;quot;).append(&amp;quot;\n&amp;quot;);
message.append(&amp;quot;data:&amp;quot;).append(&amp;quot;first line&amp;quot;).append(&amp;quot;\n&amp;quot;);
message.append(&amp;quot;data:&amp;quot;).append(&amp;quot;second line&amp;quot;).append(&amp;quot;\n&amp;quot;);
message.append(&amp;quot;retry:&amp;quot;).append(1000).append(&amp;quot;\n&amp;quot;);
message.append(&amp;quot;\n\n&amp;quot;);

// second message
message.append(&amp;quot;id:&amp;quot;).append(2).append(&amp;quot;\n&amp;quot;);
message.append(&amp;quot;event:&amp;quot;).append(&amp;quot;demoEvent2&amp;quot;).append(&amp;quot;\n&amp;quot;);
message.append(&amp;quot;data:&amp;quot;).append(&amp;quot;this is a demo data&amp;quot;).append(&amp;quot;\n&amp;quot;);
message.append(&amp;quot;\n\n&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a href=&quot;#java实现&quot; id=&quot;java实现&quot;&gt;Java实现&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;基于SpringMVC实现服务器端代码.&lt;/p&gt;
&lt;p&gt;一段比较直观的服务器端代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Controller
@RequestMapping(&amp;quot;/html5/sse&amp;quot;)
public class QuickStartController {
    @RequestMapping(&amp;quot;/quick_start&amp;quot;)
    public void quickStart(HttpServletRequest req, HttpServletResponse res) throws IOException {
        // Required! set response header and encoding
        res.setContentType(&amp;quot;text/event-stream&amp;quot;);
        res.setCharacterEncoding(&amp;quot;UTF-8&amp;quot;);
        PrintWriter writer = res.getWriter();
        // push data
        for (int i = 0; i &amp;lt; 5; i++) {
            writer.write(&amp;quot;data:&amp;quot; + i + &amp;quot;, hello for server send event！&amp;quot; + LocalDateTime.now() + &amp;quot;\n\n&amp;quot;);
            writer.flush();
            ThreadUtils.sleep(SLEEP_TIME_MILLISECONDS);
        }
        writer.close();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;利用SprigMVC的&lt;code&gt;SseEmitter&lt;/code&gt;实现服务端&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@RequestMapping(&amp;quot;/quick_start_easy&amp;quot;)
public SseEmitter quickStartEasy() {
    final SseEmitter sseEmitter = new SseEmitter();
    ExecutorService worker = Executors.newSingleThreadExecutor();
    worker.execute(() -&amp;gt; {
        try {
            for (int i = 1; i &amp;lt; 6; i++) {
                sseEmitter.send(i + &amp;quot;, hello for server send event!&amp;quot; + LocalDateTime.now(), MediaType.TEXT_PLAIN);
                ThreadUtils.sleep(SLEEP_TIME_MILLISECONDS);
            }
            sseEmitter.complete();
        } catch (IOException e) {
            sseEmitter.completeWithError(e);
        }
    });
    return sseEmitter;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a href=&quot;#代码演示&quot; id=&quot;代码演示&quot;&gt;代码演示&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/oxcow/ServerSendEventsDemo&quot;&gt;&amp;gt;&amp;gt;GitHub地址&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#reference&quot; id=&quot;reference&quot;&gt;Reference&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://html5doctor.com/server-sent-events/&quot;&gt;http://html5doctor.com/server-sent-events/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2017/05/server-sent_events.html&quot;&gt;http://www.ruanyifeng.com/blog/2017/05/server-sent_events.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.logicbig.com/tutorials/spring-framework/spring-web-mvc/sse-emitter.html&quot;&gt;https://www.logicbig.com/tutorials/spring-framework/spring-web-mvc/sse-emitter.html&lt;/a&gt;&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Third Post</title>
      <link>http://localhost:8822//blog/2013/third-post.html</link>
      <pubDate>Thu, 26 Sep 2013 00:00:00 +0800</pubDate>
      <guid isPermaLink="false">blog/2013/third-post.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque vel diam purus. Curabitur ut nisi lacus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://example.org&quot; class=&quot;bare&quot;&gt;http://example.org&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://example.org&quot;&gt;Example.org&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nam id nisl quam. Donec a lorem sit amet libero pretium vulputate vel ut purus. Suspendisse leo arcu,
mattis et imperdiet luctus, pulvinar vitae mi. Quisque fermentum sollicitudin feugiat. Mauris nec leo
ligula. Vestibulum tristique odio ut risus ultricies a hendrerit quam iaculis. Duis tempor elit sit amet
ligula vehicula et iaculis sem placerat. Fusce dictum, metus at volutpat lacinia, elit massa auctor risus,
id auctor arcu enim eu augue. Donec ultrices turpis in mi imperdiet ac venenatis sapien sodales. In
consequat imperdiet nunc quis bibendum. Nulla semper, erat quis ornare tristique, lectus massa posuere
libero, ut vehicula lectus nunc ut lorem. Aliquam erat volutpat.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>@ControllerAdvice注解</title>
      <link>http://localhost:8822//Spring/%40ControllerAdvice%E6%B3%A8%E8%A7%A3.html</link>
      <pubDate>Sun, 25 Aug 2013 00:00:00 +0800</pubDate>
      <guid isPermaLink="false">Spring/%40ControllerAdvice%E6%B3%A8%E8%A7%A3.html</guid>
      	<description>
	&lt;h1&gt;&lt;a href=&quot;#controlleradvice注解&quot; id=&quot;controlleradvice注解&quot;&gt;@ControllerAdvice注解&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;通常&lt;code&gt;@ExceptionHandler&lt;/code&gt;, &lt;code&gt;@InitBinder&lt;/code&gt;, 和 &lt;code&gt;@ModelAttribute&lt;/code&gt;使用在具体的控制器类中，如果需要在全局使用这些方法，可通过使用注解&lt;code&gt;@ControllerAdvice&lt;/code&gt;或&lt;code&gt;@RestControllerAdvice&lt;/code&gt;来实现。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@ControllerAdvice
public class MyControllerAdvice {
    
    @ExceptionHandler({FileSystemException.class, RemoteException.class})
    public String handle(IOException ex){
        // 返回报错页面
        return &amp;quot;ioerror.html&amp;quot;
    }
    
    @ModelAttribute(&amp;quot;pokers&amp;quot;)
    private List&amp;lt;PokerVo&amp;gt; findPokers() {
        return pokerService.findAllPokers();
    }
}

@RestControllerAdvice
public class MyControllerAdvice {
    
    @ExceptionHandler({FileSystemException.class, RemoteException.class})
    public ErrorMessage handle(IOException ex){
        // return JSON
        return new ErrorMessage(1000, ex.getMessage);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上述代码会对所有的&lt;code&gt;@Controller&lt;/code&gt;和&lt;code&gt;@RestController&lt;/code&gt;生效。&lt;/p&gt;
&lt;p&gt;默认情况下&lt;code&gt;@ControllerAdvice&lt;/code&gt;应用到每一个请求。可以通过下面的方式改变 &lt;em&gt;ControllAdvice&lt;/em&gt; 生效范围&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 使用指定注解的类
@ControllerAdvice(annotations = RestController.class)
public class ExampleAdvice1 {}

// 指定包下的所有Controller类
@ControllerAdvice(&amp;quot;org.example.controllers&amp;quot;)
public class ExampleAdvice2 {}

// 指定控制类
@ControllerAdvice(assignableTypes = {ControllerInterface.class, AbstractController.class})
public class ExampleAdvice3 {}
&lt;/code&gt;&lt;/pre&gt;

	</description>
    </item>
    <item>
      <title>Second Post</title>
      <link>http://localhost:8822//blog/2013/second-post.html</link>
      <pubDate>Sun, 25 Aug 2013 00:00:00 +0800</pubDate>
      <guid isPermaLink="false">blog/2013/second-post.html</guid>
      	<description>
	&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque vel diam purus. Curabitur ut nisi lacus.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://example.org&quot;&gt;http://example.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://example.org&quot;&gt;Example.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nam id nisl quam. Donec a lorem sit amet libero pretium vulputate vel ut purus. Suspendisse leo arcu,&lt;br /&gt;
mattis et imperdiet luctus, pulvinar vitae mi. Quisque fermentum sollicitudin feugiat. Mauris nec leo&lt;br /&gt;
ligula. Vestibulum tristique odio ut risus ultricies a hendrerit quam iaculis. Duis tempor elit sit amet&lt;br /&gt;
ligula vehicula et iaculis sem placerat. Fusce dictum, metus at volutpat lacinia, elit massa auctor risus,&lt;br /&gt;
id auctor arcu enim eu augue. Donec ultrices turpis in mi imperdiet ac venenatis sapien sodales. In&lt;br /&gt;
consequat imperdiet nunc quis bibendum. Nulla semper, erat quis ornare tristique, lectus massa posuere&lt;br /&gt;
libero, ut vehicula lectus nunc ut lorem. Aliquam erat volutpat.&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>部署Springboot项目到云服务器</title>
      <link>http://localhost:8822//Spring/%E9%83%A8%E7%BD%B2Springboot%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8.html</link>
      <pubDate>Sun, 25 Aug 2013 00:00:00 +0800</pubDate>
      <guid isPermaLink="false">Spring/%E9%83%A8%E7%BD%B2Springboot%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8.html</guid>
      	<description>
	&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1&gt;&lt;a href=&quot;#部署springboot项目到云服务器&quot; id=&quot;部署springboot项目到云服务器&quot;&gt;部署Springboot项目到云服务器&lt;/a&gt;&lt;/h1&gt;
&lt;h2&gt;&lt;a href=&quot;#mysql-配置&quot; id=&quot;mysql-配置&quot;&gt;mysql 配置&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;修改密码安全策略为低（只校验密码长度，至少8位）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set global validate_password_policy=0; 

ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;12345678&apos;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a href=&quot;#tomcat-配置&quot; id=&quot;tomcat-配置&quot;&gt;Tomcat 配置&lt;/a&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;chmod +x /usr/local/Tomcat8.5/bin/*.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行以下命令，修改Tomcat默认端口号为80。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sed -i &apos;s/Connector port=&amp;quot;8080&amp;quot;/Connector port=&amp;quot;80&amp;quot;/&apos; /usr/local/Tomcat8.5/conf/server.xml
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a href=&quot;#无法访问h2-console&quot; id=&quot;无法访问h2-console&quot;&gt;无法访问/h2-console&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;项目使用h2数据，开启了&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;h2.console.enabled=true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但访问是出现异常&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;H2 Console throwing a error webAllowOthers in H2 database&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;需要添加配置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;spring.h2.console.settings.web-allow-others=true
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a href=&quot;#乱码问题&quot; id=&quot;乱码问题&quot;&gt;乱码问题&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;a href=&quot;#上传文件编码警告&quot; id=&quot;上传文件编码警告&quot;&gt;上传文件编码警告&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;scp&lt;/code&gt;上传jar到服务器&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;scp xxx.jar root@xxx.xx.xx.xxx:/目录
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;警告&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/etc/profile.d/lang.sh: line 19: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8): No such file or directory&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;此时需要修改CentOS &lt;code&gt;/etc/environment&lt;/code&gt; 文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim /etc/environment
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;添加以下内容：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NG=en_US.utf-8
LC_ALL=en_US.utf-8
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a href=&quot;#控制台乱码&quot; id=&quot;控制台乱码&quot;&gt;控制台乱码&lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;logging.charset.console=UTF-8
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a href=&quot;#logback写文件乱码&quot; id=&quot;logback写文件乱码&quot;&gt;logback写文件乱码&lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;logging.charset.file=UTF-8
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a href=&quot;#nginx-支持sse&quot; id=&quot;nginx-支持sse&quot;&gt;Nginx 支持SSE&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;nginx.conf&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;location / {
    proxy_pass http://127.0.0.1:8080;
    proxy_buffering on
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;或者在服务器端添加&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Content-Type: text/event-stream;
Cache-Control: no-cache;
X-Accel-Buffering: no;
&lt;/code&gt;&lt;/pre&gt;

	</description>
    </item>
    <item>
      <title>Functional Endpoints VS Controller</title>
      <link>http://localhost:8822//Spring/Functional+Endpoints+VS+Controller.html</link>
      <pubDate>Sun, 25 Aug 2013 00:00:00 +0800</pubDate>
      <guid isPermaLink="false">Spring/Functional+Endpoints+VS+Controller.html</guid>
      	<description>
	&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1&gt;&lt;a href=&quot;#functional-endpoints-vs-controller&quot; id=&quot;functional-endpoints-vs-controller&quot;&gt;Functional Endpoints VS Controller&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://www.baeldung.com/spring-mvc-functional-controllers&quot;&gt;https://www.baeldung.com/spring-mvc-functional-controllers&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#routerfunction-vs-controller&quot; id=&quot;routerfunction-vs-controller&quot;&gt;RouterFunction vs @Controller&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the functional realm, a web service is referred to as a route and the traditional concept of &lt;code&gt;@Controller&lt;/code&gt; and &lt;code&gt;@RequestMapping&lt;/code&gt; is replaced by a RouterFunction.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@RestController
public class RestController {
     
    @GetMapping(&amp;quot;/demo/peoples&amp;quot;)
    public List&amp;lt;PeopleVo&amp;gt; findAllPeople() {
        return peopleService.findAll();
    }
    
    @ExceptionHandler
    public String handle(ObjectNotFoundException ex){
        return &amp;quot;error&amp;quot;;
    } 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;等价RouterFunction&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Configuration
public class DemoRouters {
    
    @Bean
    public RouterFunction&amp;lt;ServerResponse&amp;gt; peopleRestRouter(PeopleHandler handler) {
        return route()
            .GET(&amp;quot;/demo/peoples&amp;quot;, accept(APPLICATION_JSON), handler::findAll)
            .onError(RuntimeException.class, (e, req) -&amp;gt;
                    EntityResponse.fromObject(new ErrorMessage(1000, e.getMessage))
                            .status(HttpStatus.NOT_FOUND)
                            .build()
            )
            .build();
    }
}

public class PeopleHandler {

    private PeopleService peopleService;
    
    public PeopleHandler(PeopleService peopleService) {
        this.peopleService = peopleService;
    }
    
    public ServerResponse listPeople(ServerRequest request) {
        return ServerResponse.ok().body(peopleService.findAll());
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果要返回&lt;code&gt;ModelAndView&lt;/code&gt;,使用&lt;code&gt;RenderingResponse&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public ServerResponse listPeople(ServerRequest request) {
    return RenderingResponse.create(&amp;quot;people_list&amp;quot;)
        .modelAttribute(&amp;quot;peoples&amp;quot;, peopleService.findAll())
        .build();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a href=&quot;#nested-routes&quot; id=&quot;nested-routes&quot;&gt;Nested Routes&lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;@Bean
public RouterFunction&amp;lt;ServerResponse&amp;gt; peopleRestRouter(PeopleHandler handler) {
    return route().nest(RequestPredicates.path(&amp;quot;/demo&amp;quot;), builder -&amp;gt; {
        builder.GET(&amp;quot;/peoples&amp;quot;, handler::findAll)
                .GET(&amp;quot;/peoples/{id}&amp;quot;, handler::findById)
                .build();
    }).build();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a href=&quot;#过滤器&quot; id=&quot;过滤器&quot;&gt;过滤器&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Filters are used to decide whether to continue or abort the processing of the request.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public RouterFunction&amp;lt;ServerResponse&amp;gt; adminFunctions(ProductService ps) {
    return route().POST(&amp;quot;/product&amp;quot;, req -&amp;gt; ok().body(ps.save(req.body(Product.class))))
            .filter((req, next) -&amp;gt; authenticate(req) ? next.handle(req) :
                    status(HttpStatus.UNAUTHORIZED).build());
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a href=&quot;#around-request-use-before-and-after&quot; id=&quot;around-request-use-before-and-after&quot;&gt;Around request use before and after&lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;@Bean
public RouterFunction&amp;lt;ServerResponse&amp;gt; peopleRestRouter(PeopleHandler handler) {
    return route().nest(RequestPredicates.path(&amp;quot;/demo&amp;quot;), builder -&amp;gt; {
                builder.GET(&amp;quot;/peoples&amp;quot;, handler::findAll)
                        .GET(&amp;quot;/peoples/{id}&amp;quot;, handler::findById)
                        .build();
            })
            .before(req -&amp;gt; {
                LOGGER.info(&amp;quot;Request: before {}&amp;quot;, LocalDateTime.now());
                return req;
            })
            .after((req, res) -&amp;gt; {
                LOGGER.info(&amp;quot;Response: after {}&amp;quot;, LocalDateTime.now());
                return res;
            })
            .build();
}
&lt;/code&gt;&lt;/pre&gt;

	</description>
    </item>
    <item>
      <title>SpringMVC @ModelAttribute注解说明</title>
      <link>http://localhost:8822//Spring/%40ModelAttribute%E6%B3%A8%E8%A7%A3.html</link>
      <pubDate>Sun, 25 Aug 2013 00:00:00 +0800</pubDate>
      <guid isPermaLink="false">Spring/%40ModelAttribute%E6%B3%A8%E8%A7%A3.html</guid>
      	<description>
	&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1&gt;&lt;a href=&quot;#springmvc-modelattribute注解说明&quot; id=&quot;springmvc-modelattribute注解说明&quot;&gt;SpringMVC @ModelAttribute注解说明&lt;/a&gt;&lt;/h1&gt;
&lt;h2&gt;&lt;a href=&quot;#应用在方法上&quot; id=&quot;应用在方法上&quot;&gt;应用在方法上&lt;/a&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;@Controller
class TestController {
    
    @GetMapping(&amp;quot;/index&amp;quot;)
    public String index() {
        return &amp;quot;index&amp;quot;;
    }
    
    @ModelAttribute(&amp;quot;rooms&amp;quot;)
    private List&amp;lt;RoomVo&amp;gt; findRooms() {
        return roomService.findAllRooms();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;等价于&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@GetMapping(&amp;quot;/index&amp;quot;)
public String index(Model model) {
    model.addAttribute(&amp;quot;rooms&amp;quot;, roomService.findAllRooms());
    return &amp;quot;index&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但不同点在于，对于上面的代码来说，执行&lt;code&gt;TestController&lt;/code&gt;中的请求时都会先去执行&lt;code&gt;findAllRooms&lt;/code&gt;方法，而下面的代码只会在请求&lt;code&gt;/index&lt;/code&gt;时才会执行&lt;code&gt;findAllRooms&lt;/code&gt;方法。&lt;/p&gt;
&lt;p&gt;注意，可以在&lt;code&gt;findAllRooms&lt;/code&gt;中获取请求参数或者路径参数等信息。比如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@ModelAttribute(&amp;quot;rooms&amp;quot;)
private List&amp;lt;RoomVo&amp;gt; findRooms(@PathVariable(value = &amp;quot;id&amp;quot;, required = false) Long id) {
    return roomService.findAllRooms();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;a href=&quot;#应用在方法参数上&quot; id=&quot;应用在方法参数上&quot;&gt;应用在方法参数上&lt;/a&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;@ModelAttribute(&amp;quot;name&amp;quot;)
private String roomName(){
    return &amp;quot;room name&amp;quot;;
}

@GetMapping(&amp;quot;/index1&amp;quot;)
public String index(@ModelAttribute(&amp;quot;name&amp;quot;) String name) {
    return &amp;quot;index&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此时意味着从&lt;code&gt;Model&lt;/code&gt;中获取属性值。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;#配合requestmapping应用在方法上&quot; id=&quot;配合requestmapping应用在方法上&quot;&gt;配合@RequestMapping应用在方法上&lt;/a&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;@GetMapping(&amp;quot;/index&amp;quot;)
@ModelAttribute(&amp;quot;rooms&amp;quot;)
public List&amp;lt;RoomVo&amp;gt; index(@ModelAttribute(&amp;quot;name&amp;quot;) String name) {
    return roomService.findAllRooms());
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此时方法返回的是&lt;code&gt;Model&lt;/code&gt;数据，而不是&lt;code&gt;View&lt;/code&gt;. 对应视图的名字就是请求方法。针对上述代码返回的视图应该是&lt;code&gt;index.jsp&lt;/code&gt;或者&lt;code&gt;index.ftl&lt;/code&gt;，具体由使用的视图模板来决定。&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>First Post</title>
      <link>http://localhost:8822//blog/2013/first-post.html</link>
      <pubDate>Wed, 24 Jul 2013 00:00:00 +0800</pubDate>
      <guid isPermaLink="false">blog/2013/first-post.html</guid>
      	<description>
	
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque vel diam purus. Curabitur ut nisi lacus.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://example.org&quot;&gt;http://example.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://example.org&quot;&gt;Example.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nam id nisl quam. Donec a lorem sit amet libero pretium vulputate vel ut purus. Suspendisse leo arcu, 
mattis et imperdiet luctus, pulvinar vitae mi. Quisque fermentum sollicitudin feugiat. Mauris nec leo 
ligula. Vestibulum tristique odio ut risus ultricies a hendrerit quam iaculis. Duis tempor elit sit amet 
ligula vehicula et iaculis sem placerat. Fusce dictum, metus at volutpat lacinia, elit massa auctor risus, 
id auctor arcu enim eu augue. Donec ultrices turpis in mi imperdiet ac venenatis sapien sodales.&lt;/p&gt; 

&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code&gt;
package org.jbake;

public class Oven {
	public static void main(String[] args) {
		System.out.print(&quot;Baking!&quot;);
  }
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;In consequat imperdiet nunc quis bibendum. Nulla semper, erat quis ornare tristique, lectus massa posuere 
libero, ut vehicula lectus nunc ut lorem. Aliquam erat volutpat.&lt;/p&gt;

	</description>
    </item>

  </channel> 
</rss>
